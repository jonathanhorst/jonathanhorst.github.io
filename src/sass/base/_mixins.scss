/****** Default Mixins ******/

/// Maintain aspect ratio
/// https://css-tricks.com/snippets/sass/maintain-aspect-ratio-mixin/
@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  >.content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}

/// Maintain aspect ratio with fixed height
@mixin aspect-ratio-height($height, $ratio) {
  height: $height;
  width: $height / $ratio;
}



@mixin transition($property, $duration, $timing) {
  transition: $property $duration $timing;
}


/// Mixin to manage responsive breakpoints
/// @author Hugo Giraudel
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
/// https://css-tricks.com/snippets/sass/mixin-manage-breakpoints/
@mixin respond-to($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "+"Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

/// Since the current way to qualify a class from within its ruleset is quite
/// ugly, here is a mixin providing a friendly API to do so.
/// @author Hugo Giraudel
/// @param {String} $element-selector - Element selector
/// https://css-tricks.com/snippets/sass/mixin-to-qualify-a-selector/
@mixin qualify($element-selector) {
  @at-root #{$element-selector + &} {
    @content;
  }
}

/// Mixin to place items on a circle
/// @author Hugo Giraudel
/// @author Ana Tudor
/// @param {Integer} $item-count - Number of items on the circle
/// @param {Length} $circle-size - Large circle size
/// @param {Length} $item-size - Single item size
/// https://css-tricks.com/snippets/sass/placing-items-circle/
@mixin on-circle($item-count, $circle-size, $item-size) {
  position: relative;
  width: $circle-size;
  height: $circle-size;
  padding: 0;
  border-radius: 50%;
  list-style: none;

  >* {
    display: block;
    position: absolute;
    top: 50%;
    left: 50%;
    width: $item-size;
    height: $item-size;
    margin: -($item-size / 2);

    $angle: (360 / $item-count);
    $rot: 0;

    @for $i from 1 through $item-count {
      &:nth-of-type(#{$i}) {
        transform: rotate($rot * 1deg) translate($circle-size / 2) rotate($rot * -1deg);
      }

      $rot: $rot+$angle;
    }
  }
}

/// Screen dimensions 
@mixin screen() {
  width: 100vw;
  height: 100vh;
  @include media('>=tablet') {
    width: calc(100vw - 80px);
    height: calc(100vh - 80px);
    margin: 40px;
  }
}

/// Screen dimensions 
@mixin screenT($margin: 40px, $marginOn: true) {
  width: 100vw;
  height: 100vh;
  @include media('>=tablet') {
    width: calc(100vw - #{$margin} * 2);
    height: calc(100vh - #{$margin} * 2);
    @if $marginOn {
      margin: $margin;
    }
  }
}

/// Covering Mixin
/// https://css-tricks.com/snippets/sass/covering-mixin/
@mixin coverer {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}


/// Links colors
/// https://css-tricks.com/snippets/sass/sass-things-links/
@mixin link-colors($link, $visit, $hover, $active) {
  a {
    color: $link;
    &:visited {
      color: $visit;
    }
    &:hover {
      color: $hover;
    }
    &:active {
      color: $active;
    }
  }
}


/// https://jsfiddle.net/jitendravyas/cxJtc/
@mixin headings($from: 1, $to: 6) {
  @for $i from $from through $to {
    h#{$i} {
      @content
    }
  }
}

/// Display Block
@mixin block() {
  display: block;
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin center-flex() {
  display: flex;
  flex-direction: column;
  justify-content: center;
  @include margin(auto null);
}












/****** Custom Mixins ******/

@mixin containerSpacing($margin: true, $bleed: false) {
  @if $margin {
    @include margin(null $spacing-delta);
    @include respond-to('beta') {
      @include margin(null $spacing-epsilon);
    }
    @include respond-to('gamma') {
      @include margin(null $spacing-zeta);
    }
    @include respond-to('delta') {
      @include margin(null $spacing-eta);
    }
  }
  @if $bleed {
    @include margin(null $spacing-neg-delta);
    @include respond-to('beta') {
      @include margin(null $spacing-neg-epsilon);
    }
    @include respond-to('gamma') {
      @include margin(null $spacing-neg-zeta);
    }
    @include respond-to('delta') {
      @include margin(null $spacing-neg-eta);
    }
  }
}